<!-- Autocomplete AJAX script -->
<script>
  function boldString(str, find)
  {
    const re = new RegExp(find, 'gi');
    return str.replace(re, '<strong>' + find + '</strong>');
  }


  function autocomplete(inp, selectedContainer) {

  var currentFocus;

  // Execute a function when someone writes in the text field
  inp.addEventListener("input", function(e) {
      var a, b, i;

      // Get current value in input
      const val = this.value;

      // Close any already open lists of autocompleted values
      closeAllLists();

      // If empty input
      if (!val) 
      { 
        // Do nothing
        return false;
      }
      // Set current focus to nothing
      currentFocus = -1;

      // Create a <div> element that will contain the items (values)
      a = document.createElement("div");
      // Set it's attributes
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");

      // Create AJAX call to get appropriate data
      get('/annotator_ajax?queryValue=' + val)
        // If response OK
        .then((data) => {

          data = JSON.parse(data);

          // Append the DIV element as a child of the autocomplete container
          this.parentNode.appendChild(a);

          // For each item in the returned array
          for (i = 0; i < data.length; i++) 
          {
            // Create a DIV element for each element
            b = document.createElement("div");

            const wordTitle = boldString(data[i][1], val);
            const wordDesc = boldString(data[i][2], val);
            const exampleImagesFilenamesArr = data[i][3];

            b.innerHTML += "\
              <span class=\"keyword-title\">" + wordTitle + "</span><small>" + wordDesc + "</small>\
              <small class='wordnet-id'>" + data[i][0] + "</small>";


            let str = "<ul class=\"example-images-list\">";
            
            for (let ii = 0; ii < exampleImagesFilenamesArr.length; ++ii)
            {
              str += "<li><img src='../images/" + exampleImagesFilenamesArr[ii] + "' /></li>";    
            }

            str += "</ul>";

            b.innerHTML += str;

            // Insert a input field that will hold the current array item's value
            b.innerHTML += "<input type='hidden' name='keyword' value='" + data[i][1] + "'>";
            b.innerHTML += "<input type='hidden' name='wordnetId' value='" + data[i][0] + "'>";

            // Execute a function when someone clicks on the item value (DIV element)
            b.addEventListener("click", function(e) 
            {
              // Clear input field
              inp.value = "";
              
              // Increment counter
              selectedCounter.val = selectedCounter.val + 1;

              let selVal = '';
              let selValWord = '';
              
              console.log('Hello Franta');

              for (var i = 0; i < this.childNodes.length; i++) {
                if (this.childNodes[i].className == "wordnet-id") {
                  selVal = this.childNodes[i].innerHTML;
                  continue;
                }        

                if (this.childNodes[i].className == "keyword-title") {
                  selValWord = this.childNodes[i].innerHTML;
                  continue;
                }     
              }
              selValWord = selValWord.replace(/(<([^>]+)>)/ig,"");

              chechkboxCont = document.createElement("li");
              chechkboxCont.setAttribute("class", 'slected-keyword-checkbox');

              chechkboxCont.innerHTML += "<input type='checkbox' name='keyword' value='" + selVal + "' checked>\
                <input type='checkbox' name='keywordWord' value='" + selValWord + "' checked>\
                <span>" + selValWord + "</span> <a class='remove-keyword button alert' onclick='removeKeyword(event, this);'>&#10006</a>"

              selectedContainer.appendChild(chechkboxCont);

              


              // Close the list of autocompleted values,(or any other open lists of autocompleted values)
              closeAllLists();
            });

            a.appendChild(b);

          }
        })
        // If error occured
        .catch((err) => {
            // Do stuff on error...
        });
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
      x[i].parentNode.removeChild(x[i]);
    }
  }
}
/*execute a function when someone clicks in the document:*/
document.addEventListener("click", function (e) {
    closeAllLists(e.target);
});
}

// Call autocomplete on desired input field
autocomplete(document.getElementById("queryInput"), document.getElementById("selectedKeywordsList"));



function removeKeyword(e, t) 
{
  $(t).parent().remove();
}
</script>