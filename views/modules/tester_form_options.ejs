<!-- ${nextPropertyIndex}

activeDataPackType -->

<% 
function generateOptionHtml(optionsDict, prefix = "") {
  let html = "";

  switch(optionsDict.input_type)
  {
    case "enum":
    html += `
      <div id="cont__${nextPropertyIndex}_${optionsDict.key}" class="option-cont cell small-12">
        <label for="${optionsDict.key}">${optionsDict.name}
          <select id="${nextPropertyIndex}_${prefix}${optionsDict.key}" name="${optionsDict.key}" class="cond-opts-trigger">`;

          const vals  = optionsDict.values;
          for (let i = 0; i < vals.length; ++i){
            html += `<option value="${vals[i].ID}">${vals[i].name}</option> `;
          }

          html += `</select>
        </label>`;

    for (let i = 0; i < vals.length; ++i){
      if (vals[i].options.length > 0) {
        html += `<div id="${nextPropertyIndex}_${optionsDict.key}__${vals[i].ID}" class="sub-opts">`;

         for (let j = 0; j < vals[i].options.length; ++j){
           const opt = vals[i].options[j];
           html += generateOptionHtml(opt, prefix + optionsDict.key + "_");
         }

         html += `</div>`;
      }
      
    }

    html += `</div>`;
    break;

    case "float":
      return `
      <div class="option-cont cell small-12">
        <label for="${optionsDict.key}">${optionsDict.name}
          <input name="" id="${optionsDict.key}" type="number" min="${optionsDict.min}" max="${optionsDict.max}" step="${optionsDict.step}">
        </label>
      </div>`;
    break;

    case "int":

    break;
  }
  

  return html;
}

for (let i = 0; i < modelOptions.length; ++i) { %>

  <%- generateOptionHtml(modelOptions[i]) %>

<% } %>

