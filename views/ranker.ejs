<!-- Include header -->
<%- include common/header.ejs %>

<!-- ===================================== -->
<!-- NOTIFICATION SECTION: Messages & warnings -->
<!-- ===================================== -->
<section class="global-messages-section grid-container">
  <div class="grid-x grid-x align-center">
    <div class="callout" id="mainGlobalMessageCont">
      <h5 class="primary"></h5>
      <p class="secondary"></p>
    </div>
  </div>
</section>

<section class="ranker-grid-section grid-container">
  <div class="grid-x grid-x align-center">

<!-- ===================================== -->
<!-- Left sidebar: Target & query input -->
<!-- ===================================== -->
<div class="ranker-left-sidebar large-3 cell">

  <form autocomplete="off" class="autocomplete-form" action="/image_finder/" method="POST">

    <!-- ---------------------------------- -->
    <!-- Settings bar -->
    <!-- ---------------------------------- -->
    <section class="settings-bar-section grid-container">
      <div class="grid-x grid-padding-x align-left">  

        <!-- Active options bar -->
        <div class="misc-info-bar small-12 cell">
          <p>Data pack ID: <%= ranker.options.activeDataPackId %></p>
          <p id="currModelInfo"><strong>Model options:</strong> <%- ranker.options.activeModelOptions %></p>
        </div>

        <!-- Image settings BUTTON -->
        <div class="get-random-image-cont small-4 cell">
            <button type="button" class="button icon-settings open-left-oc" data-toggle="offCanvasLeftSplit1"><img src="/images/generic/icon_settings.svg"></button>
        </div>

        <!-- Admin info bar -->
        <div class="target-image-rank-cont small-8 cell">
          <span id="targetImageRankOut"></span>
        </div>        

      </div>
    </section>

    <!-- ---------------------------------- -->
    <!-- Image preview -->
    <!-- ---------------------------------- -->
    <section class="image-preview-section grid-container">
      <div class="grid-x grid-padding-x align-left">  

        <!-- Image settings -->
        <div class="get-random-image-cont small-4 cell" id="<%= elemIds.ranker.targetFrameButtons %>"></div>
        
        <!-- Target frames' IDs -->
        <div class="target-image-id-cont small-4 cell">
          <label class="target-image-id-label">Target image ID:
            <input type="text" id="<%= elemIds.ranker.targetFrameId %>" name="<%= elemIds.ranker.targetFrameId %>" value="" />
          </label>
        </div>
        
        <!-- Image preview canvas -->
        <ul class="image-preview small-12 cell" id="<%= elemIds.ranker.targetImagesList %>">
          
        </ul>
      </div>
    </section>


    <!-- ---------------------------------- -->
    <!-- Query inputs -->
    <!-- ---------------------------------- -->
    <section class="autocomplete-section ranker-single grid-container">
      <div class="grid-x grid-padding-x align-left"> 

        <!-- Query #1 -->
        <div class="autocomplete-input-cont small-12 cell">

          <!-- Autocomplete text input -->
          <input type="text" id="<%= elemIds.ranker.queryInput %>" tabindex="1" name="query">
          
          <!-- List of currently selected keywords -->
          <ul class="selected-keywords-list" id="<%= elemIds.ranker.selectedKeywords1 %>"></ul>
          
        </div>
      </div>

    </form>
    

  </div>

<!-- ===================================== -->
<!-- MAIN BODY: Image grid & results -->
<!-- ===================================== -->
<div class="ranker-right-sidebar image-grid-section image-browser-main-tiles large-9 cell grid-container">
  
  <!-- ---------------------------------- -->
  <!-- Search session results -->
  <!-- ---------------------------------- -->
  <div class="ranker-result-board grid-x grid-x align-center align-center" id="<%= elemIds.ranker.scoreboard %>">
    
    

  </div>

  <!-- ---------------------------------- -->
  <!-- Image grid -->
  <!-- ---------------------------------- -->
  <ul id="<%= elemIds.ranker.imageGrid %>" class="grid-x grid-x align-center align-middle"></ul>

</div>



<!-- ===================================== -->
<!-- GLOBAL MODAL WINDOW: Frame detail window -->
<!-- ===================================== -->
<div class="full reveal" id="modalImage" data-reveal data-src="999" data-overlay="false">
  
  <button class="close-button" data-close aria-label="Close modal" type="button">
    <span aria-hidden="true">&times;</span>
  </button>

  <div class="instructions">
    <span class='click-to-add-tip'>Click on words to add them to query</span>
  </div>

  <div class="modal-header cell large-12">
    <h3>Image ID:<span id="modalImageId"></span></h3>
  </div>
  <div>
    <ul id="sucFramesCont">

    </ul>
  </div>

  <!-- Tabs navigation -->
  <ul class="tabs" data-tabs id="modalImageTabs">
    <li class="tabs-title is-active"><a data-tabs-target="modalImageTab1" href="#modalImageTab1" aria-selected="true">Concepts</a></li>
    <li class="tabs-title"><a data-tabs-target="modalImageTab2" href="#modalImageTab2">Pure hypernyms</a></li>
  </ul>
  <div class="tabs-content" data-tabs-content="modalImageTabs">
    <div class="tabs-panel is-active" id="modalImageTab1">
      
    </div>
    <div class="tabs-panel" id="modalImageTab2">
      
    </div>
  </div>

</div>



<!-- ===================================== -->
<!-- EVALUATOR ONLY PANEL: Frame detail window -->
<!-- ===================================== -->

<%  // \todo change
if (state.userLevel  >= 0) { %>
    <div class="developer-bottom-analysis-bar grid-container">

      <ul class="accordion" id="devAccordion" data-slide-speed="0" data-accordion data-allow-all-closed="true">
        <div id="dragbar"><span class="icon"><img src="../images/generic/icon_gripping_hand.svg" /></span></div>
        <li class="accordion-item" data-accordion-item>
          <!-- Accordion tab title -->
          <a href="#" class="accordion-title">Analysis</a>

          <!-- Accordion tab content: it would start in the open state due to using the `is-active` state class. -->
          <div class="accordion-content flexible-developer-only-window" data-tab-content>
            
            <div class="current-session-chart-const small-6 cell">
              <canvas class="chart-canvas" id="progressChart"></canvas> 
            </div>

          </div>
        </li>
      </ul>

    </div>

    <script>

      $(document).ready(function() {
        $('#devAccordion')
          .on("down.zf.accordion", function(e, $panel) 
          {
            $("#dragbar").show();
          })
          .on("up.zf.accordion", function(e, $panel) 
          {

            $("#dragbar").hide();
            $('#devAccordion').css("height", "auto");
            
          });
      });



      var i = 0;
      var dragging = false;
      $('#dragbar').mousedown(function(e){
          e.preventDefault();
          
          dragging = true;
          var main = $('#devAccordion');
          var ghostbar = $('<div>',
                            {id:'ghostbar',
                            css: {
                                    height: "5px",
                                    width: "100%",
                                    top: main.offset().top,
                                    left: main.offset().left
                                  }
                            }).appendTo('body');
          
            $(document).mousemove(function(e){
              ghostbar.css("top",e.pageY+2);
          });
          
        });

      $(document).mouseup(function(e){
        if (dragging) 
        {
            var percentage = 100 -(e.pageY / window.innerHeight) * 100;
            
            $('#devAccordion').css("height", percentage + "vh");
            $('#ghostbar').remove();
            $(document).unbind('mousemove');
            dragging = false;
        }
      });
    </script>
<% } %>



  </div>
</section>

</body>



<!-- Client-side JS CHART PLOTTING functions -->
<script src="/javascripts/Chart.bundle.js"></script>
<script>
  const chartSettings = {
    // The type of chart we want to create
    type: 'line',

    // The data for our dataset
    data: {},

    // Configuration options go here
    options: {
      animation: {
          duration: 0
      },
      legend: {
            display: false
          },
      responsive: true,
      title: {
        display: false,
        text: ''
      },
      tooltips: {
        mode: 'index',
        intersect: false,
      },
      hover: {
        mode: 'nearest',
        intersect: true
      },
      scales: {
        xAxes: [{
          display: true,
          scaleLabel: {
            display: false,
            labelString: 'Action index'
          },
          ticks: {
            autoSkip: false,
            maxRotation: 90,
            minRotation: 90
          }

        }],
        yAxes: [{
          type: 'linear',
          display: true,
          ticks: {
            beginAtZero: true,
            autoSkip: true,
            min: 0,
            // \todo make dynamic
            suggestedMax: 20000,
            // Return an empty string to draw the tick line but hide the tick label
            // Return `null` or `undefined` to hide the tick line entirely
            maxTicksLimit: 10,
            callback: function(value, index, values) {
                return Number(value);
            }
          },
          scaleLabel: {
            display: true,
            labelString: 'Target image rank'
          }
      }]
    }
  }
}

function drawInteractiveSearchChart(chartDataArray, targetCanvas)
{

  if (typeof chartDataArray === "undefined" || chartDataArray.length <= 0)
  {
    return;
  }
  
  const num = chartDataArray.length;
  const divPerChanel = (num / 3) + 1;
  
  // Labels
  const labels = chartDataArray[0].labels;

  let datasetsArr = [];
  for (var i = 0; i < chartDataArray.length; ++i) {
    const chartData = chartDataArray[i];

    const xs = chartData.xs;
    const fxs = chartData.fxs;

    // Calculate coefs for colour
    const r = (i % 3 == 0 ? 1 : 0) * 255;
    const g = (i % 3 == 1 ? 1 : 0) * 255;
    const b = (i % 3 == 2 ? 1 : 0) * 255;

    const borderColor = "rgba(" + r + ", " + g + ", " + b + ", 1)";

    let dataFormed = []
    for (let ii = 0; ii < xs.length; ++ii)
    {
      dataFormed.push({
        x: xs[ii],
        y: fxs[ii]
      })
    }

    const plotData = {
      borderColor: borderColor,
      backgroundColor: "rgba(255, 0, 0, 0)",
      pointRadius: 0.5,
      pointHoverRadius: 0.5,
      borderWidth: 1.0,
      data: dataFormed,
    }

    datasetsArr.push(plotData);
  }


  const plotData = {
    labels: labels,
    datasets: datasetsArr
  }

  const chartCanvas = targetCanvas;
  // Create chart
  var ctx = chartCanvas.getContext('2d');
  var chart = new Chart(ctx, chartSettings);

  // Update the chart
  chart.data = plotData;
  chart.update();
}


</script>


<script>

  /**
   * View data sent from the back-end.
   */ 
  const viewData = { 
    ranker: <%- JSON.stringify(ranker, null, 4); %>,
    elemIds: <%- JSON.stringify(elemIds, null, 4); %>
  };

  let currentPrinter;
  let currentImagesToPrintArray;
  let currentImageIndex;
  let numImagesToPrint;
  const numImagesPerBatch = 300;
  const batchPrintTimeout = 2000;
  const labelsContainer = document.getElementById("modalImageTab1");
  const pureHyerpnymsContainer = document.getElementById("modalImageTab2");
  const imageIdCont = document.getElementById("modalImageId");
  const succFramesCont = document.getElementById("sucFramesCont");

  function startSearchSession(elem, targetFramesIds = [])
  {
    const reqData = {
      targetFramesIds: targetFramesIds
    }

    fetch("/ranker_start_search_session", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(reqData),
    })
    .then((res) => res.json())
    .then((data) => {
      // Handle error
      if (data.error)
      {
        throw Error(data.error.message);
      }

      // Update viewData
      viewData.ranker.searchSession = data.searchSession;
      viewData.ranker.state = data.state;

      // Update document
      putDocumentToState(viewData);

    })
    .catch((e) => {
      console.log("Error: " + JSON.stringify(e.message));
      showGlobalMessage("Send action failed!", "Sorry, error happened while processing it.", 5000);
    });
  }

  function switchModalImageHtmlContents(id) 
{
  $.ajax('/ranker_ajax_get_image_keywords_for_interactive_search?imageId=' + id)
    .done(function(data)
    {
      const hypernymsArray = data.hypernymsArray;
      const nonHypernymsArray = data.nonHypernymsArray;
      const shotFrames = data.shotFrames;

      // Fill in image ID
      imageIdCont.innerHTML = data.imageId;

      // 
      // Fill in succ frames
      //
      let succFramesHtml = "";
      for (var i = 0; i < shotFrames.length; ++i) 
      {
        succFramesHtml += "<li class='shot-frame-praview'>";
        succFramesHtml += "<img src='../images/" + shotFrames[i].frameFilename + "' />";
        succFramesHtml += "<small>" + shotFrames[i].frameId + "</small>";
        succFramesHtml += "</li>";
      }
      
      succFramesCont.innerHTML = succFramesHtml;


      /*
        Labels
       */

      let labelsItemsHtml = "<ol class='labels-list non-hypernyms-list'>";

      for (var i = 0; i < nonHypernymsArray.length; ++i) 
      {
        labelsItemsHtml += "<li class='probs-list-item '>";
        labelsItemsHtml += "<a class='keyword' onclick='addKeyword(" + nonHypernymsArray[i].wordnetId + ", \"" + nonHypernymsArray[i].word + "\", 2)'>" + nonHypernymsArray[i].word +  "<span class='ranking'>" + nonHypernymsArray[i].ranking + "</span></a>";
        
        let str = "<ul class='example-images'>";
        
        const exampleImagesArr = nonHypernymsArray[i].exampleImages;
        for (var ii = 0; ii < exampleImagesArr.length; ++ii) 
        { 
          
            str += "<li><img src='../images/" + exampleImagesArr[ii] + "' /></li>";    
        }

        str += "</ul>";

        labelsItemsHtml += str;
        labelsItemsHtml += "</li>";
      }
      labelsItemsHtml += "</ol>";

      // Push HTML inside
      labelsContainer.innerHTML = labelsItemsHtml;
      
      /*
        Pure hypernyms
       */

      html = "<ol class='labels-list  hypernyms-list'>";

      for (var i = 0; i < hypernymsArray.length; ++i) 
      {
        html += "<li class='probs-list-item '>";
          html += "<a class='keyword' onclick='addKeyword(" + hypernymsArray[i].wordnetId + ", \"" + hypernymsArray[i].word + "\", 2)'>" + hypernymsArray[i].word + "<span class='ranking'>" + hypernymsArray[i].ranking + "</span></a>";
            
          let str = "<ul class='example-images'>";
          
          const exampleImagesArr = hypernymsArray[i].exampleImages;
          for (var ii = 0; ii < exampleImagesArr.length; ++ii) 
          { 
            
              str += "<li><img src='../images/" + exampleImagesArr[ii] + "' /></li>";    
          }

          str += "</ul>";

        html += str;

        html += "</li>";
      }
      html += "</ol>";
      
      // Push HTML inside
      pureHyerpnymsContainer.innerHTML = html;
    }
  )
  // If error occured
  .catch((err) => 
  {
    console.log("/ranker_ajax_get_image_keywords_for_interactive_search AJAX call failed!");
    alert("/ranker_ajax_get_image_keywords_for_interactive_search AJAX call failed!");
  });
}

// xoxo
function submitImage(elem)
{
  // By default no frame ID -> This means DISCARD
  let imageId = null;
  if (typeof elem !== "undefined")
  {
    // This means submit
    imageId = $(elem).parent().parent().data("image-id");
  }

  // Request input data
  const reqData = {
    frameId: imageId
  };

  // Make the request
  fetch("/ranker_submit_frame", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(reqData),
  })
  .then((res) => res.json())
  .then((data) => {
    // Handle error
    if (data.error)
    {
      throw Error(data.error.message);
    }

    // Update viewData
    viewData.ranker.searchSession = data.searchSession;
    viewData.ranker.state = data.state;
    const chartData = data.chartData;

    // If was correct => we went "finished"
    if (viewData.ranker.state == "finished")
    {
      if (viewData.ranker.searchSession.found)
      {
        handleCorrectSubmit(viewData, chartData);
      } else {
        handleGiveUp(viewData, chartData);
      }
      
    } else {
      handleIncorrectSubmit(viewData);
    }
  })
  .catch((e) => {
    console.log("Error: " + JSON.stringify(e.message));
    showGlobalMessage("Send action failed!", "Sorry, error happened while processing it.", 5000);
  });
}

function handleGiveUp(viewData, chartData) {
  // Update document
  putDocumentToState(viewData);
  
  // Draw chart
  const dataArray = [chartData];
  const canvas = document.getElementById(viewData.elemIds.ranker.rankerScoreChart);
  drawInteractiveSearchChart(dataArray, canvas);

  console.log("Showing correct submit image data.");
  showGlobalMessage("You gave up...", "Don't worry and try again.", 5000);
}

function handleCorrectSubmit(viewData, chartData) {
  // Update document
  putDocumentToState(viewData);
  
  // Draw chart
  const dataArray = [chartData];
  const canvas = document.getElementById(viewData.elemIds.ranker.rankerScoreChart);
  drawInteractiveSearchChart(dataArray, canvas);

  console.log("Showing correct submit image data.");
  showGlobalMessage("Correct.", "Great job", 5000);
}


function handleDiscardSession(viewData) {
  // Update document
  putDocumentToState(viewData);

  showGlobalMessage("Session discarded.", "It won't be logged.", 5000);
}

function handleIncorrectSubmit(viewData) {
  showGlobalMessage("Incorrect submit", "Sorry, this is not the correct image, please try again.", 5000);
}

function handleActionPush(viewData, chartData, queryResult) {

  const frames = queryResult.frames;
  const targetPos = queryResult.target_position;

  $targetList = $("#" + viewData.elemIds.ranker.imageGrid);
  $targetList.html("");

  $("#targetImageRankOut").html("<p>Target rank: </p>" + targetPos);
  

  // Update image grid
  numImagesToPrint = frames.length;
  currentImagesToPrintArray = frames;

  currentImageIndex = 0;
  for (currentImageIndex = 0; currentImageIndex < numImagesToPrint; ++currentImageIndex) 
  {
    $targetList.append(
      '<button class="close-button" data-close aria-label="Close modal" type="button">\
        <span aria-hidden="true">&times;</span>\
      </button>\
      <li class="rel-img-item small-6 medium-4 large-2 cell" onclick="switchModalImageHtmlContents(' + frames[currentImageIndex].frame_ID+ ')"\
        data-image-id="' + frames[currentImageIndex].frame_ID + '" style="background-image: url(\'/images/' +frames[currentImageIndex].filename + '\')">\
        <div class="just-clicker"  data-open="modalImage"><a class="button btn-submit success" onclick="submitImage(this);event.cancelBubble=true;" title="Submit this image">&#10004;</a></div>\
      </li>'
    );
  }

  // Draw chart
  let dataArray = new Array();
  dataArray.push(chartData);
  const canvas = document.getElementById(viewData.elemIds.ranker.progressChart);
  if (canvas)
  {
    drawInteractiveSearchChart(dataArray, canvas);
  }

}

function processAction(queryIdx, action, operand, word)
{
  const reqData = {
    aueryIdx: queryIdx,
    action: action,
    operand: operand,
    word: word
  };

  fetch("/ranker_push_search_action", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(reqData),
    })
    .then((res) => res.json())
    .then((data) => {
      // Handle error
      if (data.error)
      {
        throw Error(data.error.message);
      }

      // Update viewData
      viewData.ranker.searchSession = data.searchSession;
      viewData.ranker.state = data.state;

      const chartData = data.chartData;
      const queryResult = data.queryResult;

      // Update document
      handleActionPush(viewData, chartData, queryResult);

    })
    .catch((e) => {
      console.log("Error: " + JSON.stringify(e.message));
      showGlobalMessage("Send action failed!", "Sorry, error happened while processing it.", 5000);
    });
}

function discardSession() {

  // Request input data
  const reqData = {};

  // Make the request
  fetch("/ranker_discard_search_session", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(reqData),
  })
  .then((res) => res.json())
  .then((data) => {
    // Handle error
    if (data.error)
    {
      throw Error(data.error.message);
    }

    viewData.ranker.searchSession = data.searchSession;
    viewData.ranker.state = data.state;

    handleDiscardSession(viewData);
  
  })
  .catch((e) => {
    console.log("Error: " + JSON.stringify(e.message));
    showGlobalMessage("Send action failed!", "Sorry, error happened while processing it.", 5000);
  });
}

function setupTargetFrameButtons(viewData)
{
  const elem = document.getElementById(viewData.elemIds.ranker.targetFrameButtons);

  if (viewData.ranker.state == "running") {
    elem.innerHTML = 
      `<a class="button" onclick="submitImage();">Give up!</a>
      <a class="button alert" onclick="discardSession();">!! DISCARD SESSION !!</a>`;
  } else {
    elem.innerHTML = 
      `<a class="button" onclick="startSearchSession(this);">Random image</a>`;
  }

}

function setupImageGrid(viewData)
{
  const elem = document.getElementById(viewData.elemIds.ranker.imageGrid);

  elem.innerHTML = "";
}

function setupTargetFrames(viewData) {
  const elem = document.getElementById(
    viewData.elemIds.ranker.targetImagesList
  );
  const elemIdInput = document.getElementById(
    viewData.elemIds.ranker.targetFrameId
  );
  
  elemIdInput.innerHTML = "";
  if (viewData.ranker.state == "running") {
    const targetIds =  viewData.ranker.searchSession.targetFramesIds;
    for (let i = 0; i < targetIds.length; ++i) {
      elem.innerHTML = `<li><img src="/images/${targetIds[i].filename}" /></li>`;
      elemIdInput.value = `${elemIdInput.value}${targetIds[i].frameId},`;
    }
  } else {
    elem.innerHTML = `<li><img src="/images/generic/bg_neural.jpg" /></li>`;
  }
}

function setupScoreBoard(viewData) {
  const elem = document.getElementById(viewData.elemIds.ranker.scoreboard);

  let actions = [];
  let foundClass = "not-found";
  let foundText = "Nenalezeno...";
  let finalRank = "null";
  let duration = "null";
  if (viewData.ranker.searchSession)
  {
    actions = viewData.ranker.searchSession.actions;
    if (actions.length > 0)
      finalRank = actions[actions.length - 1].score;

    duration = viewData.ranker.searchSession.duration;
      
    if (viewData.ranker.searchSession.found){
      foundClass = "found";
      foundText = "Nalezeno!";
    }
  }
  
  elem.innerHTML = `
    <div class="result-actions-board-title cell large-12">
      <h1>Search session results</h1>
    </div>
    
    <div class="result-actions-chart cell large-6">
      <h2>Rank progress:</h2>
      <canvas id="${viewData.elemIds.ranker.rankerScoreChart}"></canvas>
    </div>

    <div class="result-actions-info cell large-6">  
      <h2>Other info</h2>
      <div id="resultInfo"> 
        <h2 class="${foundClass}">${foundText}</h2>
        <h3>Final image rank: <span>${finalRank}</span></h3>
        <h5>Time: <span>${duration}s</span></h5>
      </div>
    </div>`;

  if (viewData.ranker.state == "finished") {
    elem.classList.add("active");
  } else {
    elem.classList.remove("active");
  }
}

function addSelectedKeyword(elem, ID, word)
{
  let html = "";
  html += `
      <li class="slected-keyword-checkbox">
        <input type="checkbox" name="keywordWord" value="${word}" checked="">                
        <input type="checkbox" name="keyword" value="${ID}" checked="">                
        <span>${word}</span> <a class="remove-keyword button alert" onclick="removeKeyword(event, this, 0);">&#10006</a>
      </li>`;

  elem.innerHTML = elem.innerHTML + html;
}

function setupSelectedKeywords(viewData) {
  const elem = document.getElementById(
    viewData.elemIds.ranker.selectedKeywords1
  );
  elem.innerHTML = "";
  let html = "";

  // Append all selected keywords
  const keywordIds = viewData.ranker.ui.query;
  const wordStrings = viewData.ranker.ui.queryWords;
  for (let i = 0; i < keywordIds.length; ++i) {
    addSelectedKeyword(elem, keywordIds[i], wordStrings[i]);
  }
}

/**
 * This function modifies current page HTML according to state data.
 */

function putDocumentToState(viewData) {
  // Get ranker state
  const rankerState = viewData.ranker.state;

  // -----------------------------
  // Manage scoreboard
  setupScoreBoard(viewData);

  // -----------------------------
  // Manage image grid
  setupImageGrid(viewData);

  // -----------------------------
  // Change buttons
  setupTargetFrameButtons(viewData);

  // -----------------------------
  // Setup target frames
  setupTargetFrames(viewData);

  // -----------------------------
  // Setup selected keywords
  setupSelectedKeywords(viewData);

  // -----------------------------
  // Setup query inputs
  if (rankerState == "running") {
    document.getElementById(
      viewData.elemIds.ranker.queryInput
    ).disabled = false;
  } else {
    document.getElementById(viewData.elemIds.ranker.queryInput).disabled = true;
  }
}

function showGlobalMessage(messagePrimary, messageSecondary, time)
{
  $mainGlobalMessageCont = $("#mainGlobalMessageCont");
  $primary = $($mainGlobalMessageCont.children(".primary")[0]);
  $secondary = $($mainGlobalMessageCont.children(".secondary")[0]);

  $mainGlobalMessageCont.show();
  $primary.html(messagePrimary);
  $secondary.html(messageSecondary);

  setTimeout(() => {
    clearGlobalMesssage();
  }, time);
}

function clearGlobalMesssage()
{
  $mainGlobalMessageCont = $("#mainGlobalMessageCont");
  $primary = $($mainGlobalMessageCont.children(".primary")[0]);
  $secondary = $($mainGlobalMessageCont.children(".secondary")[0]);


  $primary.html("");
  $secondary.html("");
  $mainGlobalMessageCont.hide();
}

</script>

<!-- Client-side JS RANKER functions -->
<%- include modules/autocomplete_logic_ranker.ejs %>

<!-- Include footer -->
<%- include common/footer.ejs %>

<script>

/** Put document into correct state */
onDocumentReady(function() {
  putDocumentToState(viewData);
});

</script>