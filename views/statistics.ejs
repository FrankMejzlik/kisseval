<!-- Include header -->
<%- include common/header.ejs %>

<section class="page-title-section">
  <div class="grid-x grid-padding-x align-center grid-container">
    
    <div class="page-title small-12 cell text-center">
      <h1>Data exports</h1>
    </div>

  </div>
</section>

<section class="exporter-section "></section>
  <div class="grid-x grid-padding-x align-center grid-container">

    <div class="section-header large-12 cell text-center">
      <h2></h2>
    </div>

    <div class="large-12 cell text-center"></div>
      <ul class="tabs" data-tabs id="example-tabs">
        <li class="tabs-title is-active"><a href="#panel1" aria-selected="true">Google Vision</a></li>
        <li class="tabs-title"><a data-tabs-target="panel2" href="#panel2">Viret</a></li>
      </ul>
      <div class="tabs-content " data-tabs-content="example-tabs">

        <!-- Tab "Google Vision" -->
        <div class="tabs-panel is-active" id="panel1">
            <div class="general-stats-panel large-12 cell">
              <h3>General stats</h3>
              <p>Num of distinct keywords: <span><%= statistics.statObjGoogle.keywordsStats.numDistinctKeywords %></span></p>
              <p>Min # of labels used: <span><%= statistics.statObjGoogle.annotatorDataStats.minKeywords %></span></p>
              <p>Max # of labels used: <span><%= statistics.statObjGoogle.annotatorDataStats.maxKeywords %></span></p>
              <p>Avg # of labels used: <span><%= statistics.statObjGoogle.annotatorDataStats.avgKeywords %></span></p>
              <p>Median of labels used: <span><%= statistics.statObjGoogle.annotatorDataStats.medianKeywords %></span></p>
              <p>Probability of label hit: <span><%= statistics.statObjGoogle.annotatorDataStats.labelHitProb %></span></p>
            </div>
          <hr />
          <hr />
          <ul class="exporter-file-list">
            <li>
                <h3 class="file-header">"Keyword classes" file</h3>
                <p>Keywords describing file in Viret format</p>
                <code class="code-block">
FORMAT:
  Radky zacinajici H lze ignorovat (jedna se o hypernyma)
  Jedna se o csv soubor se sloupci oddelenymi tildou (~)
  Sloupce jsou poporade:
  1) index ve vektroru ktery je vystupem ze site
  2) id ve wordnetu
  3) nazev tridy (potazmo vice nazvu oddelene pomoci #)
  4) wordnet id hyponyma (potazmo vice idcek hyponym oddelene pomoci #)
  5) wordnet id hypernyma (potazmo vice idcek hypernym oddelene pomoci #)
  6)textovy popis
  hypernyma (radky zacinajici H) jsou vedena v souboru uplne stejne akorat nemaji index ve vektroru ktery je vystupem ze site.
                </code>
              <a <% if (!exportedFiles.id100.id100.eKeywordClasses) { %> style="display: none;" <% } %>
                href="<%= exportedFiles.id100.id100.eKeywordClasses %>" target="_blank" class="button download-btn success">Download</a>
            </li>
            <hr />
            <li>
              <h3 class="file-header">"User annotator queries" file</h3>
              <p>User annotated (image, query) pairs</p>
              <code class="code-block">
FORMAT:
  image ID0, type0, kw0 ID, kw1 ID, ....
  image ID1, type1, kw0 ID, kw1 ID, ....
  ...
  image IDN-1, typeN-1, kw0 ID, kw1 ID, ....

  `type` column:
    0 - dev session without example images
    1 - public session without example images
    10 - dev session with example images
    11 - public session with example images

    NOTE: All data ATM should be considered dev because there were no real "publc" users gathering data
              </code>
              <a class="button regenerate-btn"  onclick="exportFile(this, 0, 100, 100)">Regenerate file</a>
              <a <% if (!exportedFiles.id100.id100.eUserAnnotatorQueries) { %> style="display: none;" <% } %>
                href="<%= exportedFiles.id100.id100.eUserAnnotatorQueries %>"  target="_blank" class="button download-btn success">Download</a>
            </li>
            <hr />
            <li>
              <h3 class="file-header">"Net normalized scores" file</h3>
              <p>Normalized per image (keyword ID, scoring) pairs from neural network.</p>
              <code class="code-block">
FORMAT:
  image ID0, keyword ID0, scoring 0, keyword ID1, scoring 1, ..., keyword IDK-1, scoring K-1
  ...
  image IDN-1, keyword ID0, scoring 0, keyword ID1, scoring 1, ..., keyword IDK-1, scoring K-1
              </code>
              <a class="button regenerate-btn"  onclick="exportFile(this, 1, 100, 100)">Regenerate file</a>

              <a <% if (!exportedFiles.id100.id100.eNetNormalizedScores) { %> style="display: none;" <% } %>
                href="<%= exportedFiles.id100.id100.eNetNormalizedScores %>" target="_blank" class="button download-btn success">Download</a>

            </li>
            <hr />
            <li>
                <h3 class="file-header">"Per query # hits vs # labels used" file</h3>
                <p>Per query, number of hits with number of labels used</p>
                <code class="code-block">
FORMAT:
  query ID 0, image ID 0, number of hits 0, number of labels used 0
  query ID 1, image ID 1, number of hits 1, number of labels used 1
  ...
  query ID N-1, image ID N-1, number of hits N-1, number of labels used N-1
                </code>
                <a class="button regenerate-btn"  onclick="exportFile(this, 2, 100, 100)">Regenerate file</a>
  
                <a <% if (!exportedFiles.id100.id100.eQueryNumHits) { %> style="display: none;" <% } %>
                  href="<%= exportedFiles.id100.id100.eQueryNumHits %>" target="_blank" class="button download-btn success">Download</a>
  
              </li>
          </ul>

        </div>

        <!-- Tab "Viret" -->
        <div class="tabs-panel" id="panel2">
            <div class="general-stats-panel large-12 cell">
                <h3>General stats</h3>
                <p>Num of distinct keywords: <span><%= statistics.statObjViret.keywordsStats.numDistinctKeywords %></span></p>
                <p>Min # of labels used: <span><%= statistics.statObjViret.annotatorDataStats.minKeywords %></span></p>
                <p>Max # of labels used: <span><%= statistics.statObjViret.annotatorDataStats.maxKeywords %></span></p>
                <p>Avg # of labels used: <span><%= statistics.statObjViret.annotatorDataStats.avgKeywords %></span></p>
                <p>Median of labels used: <span><%= statistics.statObjViret.annotatorDataStats.medianKeywords %></span></p>
                <p>Probability of label hit: <span><%= statistics.statObjViret.annotatorDataStats.labelHitProb %></span></p>
              </div>
            <hr />
            <hr />
          <ul class="exporter-file-list">
            <li>
                <h3 class="file-header">"Keyword classes" file</h3>
                <p>Keywords describing file in Viret format</p>
                <code class="code-block">
FORMAT:
  Radky zacinajici H lze ignorovat (jedna se o hypernyma)
  Jedna se o csv soubor se sloupci oddelenymi tildou (~)
  Sloupce jsou poporade:
  1) index ve vektroru ktery je vystupem ze site
  2) id ve wordnetu
  3) nazev tridy (potazmo vice nazvu oddelene pomoci #)
  4) wordnet id hyponyma (potazmo vice idcek hyponym oddelene pomoci #)
  5) wordnet id hypernyma (potazmo vice idcek hypernym oddelene pomoci #)
  6)textovy popis
  hypernyma (radky zacinajici H) jsou vedena v souboru uplne stejne akorat nemaji index ve vektroru ktery je vystupem ze site.
                </code>

                <a <% if (!exportedFiles.id0.id0.eKeywordClasses) { %> style="display: none;" <% } %>
                  href="<%= exportedFiles.id0.id0.eKeywordClasses %>"  target="_blank" class="button download-btn success">Download</a>
              
            </li>
            <hr />
            <li>
              <h3 class="file-header">"User annotator queries" file</h3>
              <p>User annotated (image, query) pairs</p>
              <code class="code-block">
FORMAT:
  image ID0, type0, kw0 ID, kw1 ID, ....
  image ID1, type1, kw0 ID, kw1 ID, ....
  ...
  image IDN-1, typeN-1, kw0 ID, kw1 ID, ....

  `type` column:
    0 - dev session without example images
    1 - public session without example images
    10 - dev session with example images
    11 - public session with example images

    NOTE: All data ATM should be considered dev because there were no real "publc" users gathering data
              </code>
              <a class="button regenerate-btn"  onclick="exportFile(this, 0, 0, 0)">Regenerate file</a>

              <a <% if (!exportedFiles.id0.id0.eUserAnnotatorQueries) { %> style="display: none;" <% } %>
                href="<%= exportedFiles.id0.id0.eUserAnnotatorQueries %>" target="_blank" class="button download-btn success">Download</a>
            </li>
            <hr />
            <li>
              <h3 class="file-header">"Net normalized scores" file</h3>
              <p>Normalized per image (keyword ID, scoring) pairs from neural network.</p>
              <code class="code-block">
FORMAT:
  image ID0, keyword ID0, scoring 0, keyword ID1, scoring 1, ..., keyword IDK-1, scoring K-1
  ...
  image IDN-1, keyword ID0, scoring 0, keyword ID1, scoring 1, ..., keyword IDK-1, scoring K-1
              </code>
              <a class="button regenerate-btn"  onclick="exportFile(this, 1, 0, 0)">Regenerate file</a>

              <a <% if (!exportedFiles.id0.id0.eNetNormalizedScores) { %> style="display: none;" <% } %>
                href="<%= exportedFiles.id0.id0.eNetNormalizedScores %>"  target="_blank"class="button download-btn success">Download</a>
              
            </li>
          </ul>
        </div>

      </div>
    </div>

  </div>
</div>

<script>
  function exportFile(btn, fileType, kwTypeId, scTypeId)
  {
    const $this = $(btn);
    const $downloadBtn = $this.parent().children(".download-btn");
    
    $downloadBtn.hide();
    $this.html("Generating...");

    // Create AJAX call to get appropriate data
    post('/exporter_ajax_export_file', JSON.stringify({kwTypeId:kwTypeId , scTypeId: scTypeId, fileType: fileType}))
      // If response recieved
      .then((data) => 
      {
        data = JSON.parse(data);

        if (data.result) 
        {
          const $this = $(btn);
          const $downloadBtn = $this.parent().children(".download-btn");

          $downloadBtn.attr("href", data.filename);
          $downloadBtn.show();
          $this.html("Regenerate");
        }
        else 
        {
          const $this = $(btn);
          const $downloadBtn = $this.parent().children(".download-btn");

          $this.html("Regenerate");
          $downloadBtn.html(":(");

          console.log("exporter_ajax_export_file AJAX call failed!");
          alert("exporter_ajax_export_file AJAX call failed!");
        }
        

      })
      // If error occured
      .catch((err) => 
      {
        const $this = $(btn);
        const $downloadBtn = $this.parent().children(".download-btn");

        $this.html("Regenerate");
        $downloadBtn.html(":(");

        console.log("exporter_ajax_export_file AJAX call failed!");
        alert("exporter_ajax_export_file AJAX call failed!");
      });
  }

</script>


<% if (false) { %>

<section class="statistics-models-showoff-section ">
  <div class="grid-x grid-padding-x align-center grid-container">

    <div class="section-header large-12 cell text-center">
      <h2>Best transformations/models performance</h2>
      <p>These charts show number of input queries ranked until some rank.</p>
    </div>

    <div class="chart1-left small-6 cell text-center">
      <h4>Real users</h4>
      
      <canvas class="chart-canvas" id="modelShowOffChar1"></canvas> 
      
    </div>

    <div class="chart1-left small-6 cell text-center">
      <h4>Simulated users</h4>
      
      <canvas class="chart-canvas" id="modelShowOffChar2"></canvas> 
    </div>

  </div>
</section>

<section class="statistics-hyper-nonhyper-section">
  <div class="grid-x grid-padding-x align-center grid-container">

    <div class="section-header large-12 cell text-center">
      <h2>Real user annotator queries</h2>
      <p>Statistics about user quesries gathered in Query annotator.</p>
    </div>

    <div class="section-sub-header large-12 cell">
      <h3>Hypernym/non-hypernym hit ditribution</h3>
      <p>Charts showing how good keywords real users use to describe images compared to what neural network sees.</p>

      <p>E.g. if neural network has the most probable keywords in descending order "Cat, Table, Dog, Car, Road" and user types in "Cat, Car, Dog"
      then user scored 1, 3 and 4 compared to neural network and in hit histogram we increment positions 1,2,4.
      </p>
    </div>

    <div class="nonhyper small-6 cell text-center">
      <h4>Non-hypernyms</h4>
      <h5>Percentage in user queries: <%= nonHyper.misc.percentage %>%</h5>
      <canvas class="chart-canvas" id="nonhyperChart"></canvas> 
      
    </div>

    <div class="hyper small-6 cell text-center">
      <h4>Hypernyms</h4>
      <h5>Percentage in user queries: <%= hyper.misc.percentage %>%</h5>
      <canvas class="chart-canvas" id="hyperChart"></canvas> 
    </div>

  </div>
</section>

<section class="statistics-query-refining-section">
  <div class="grid-x grid-padding-x align-center grid-container">

    <div class="section-header large-12 cell text-center">
      <h2>Query refining statistics</h2>
      <p>Statistics about users that rafined their queries based on immediate feedback</p>
    </div>

    <div class="nonhyper small-6 cell text-center">
      <h4>Average image rank with increasing number of actions</h4>
      
      <canvas class="chart-canvas" id="queryRefiningChart1"></canvas> 
      
    </div>

    <div class="hyper small-6 cell text-center">
      <h4>xx</h4>
      
      <canvas class="chart-canvas" id="queryRefiningChart2"></canvas> 
    </div>

  </div>
</section> 

<script src="/javascripts/Chart.bundle.js"></script>
<script>

$( document ).ready(function() 
{
    drawInteractiveSearchChart1();
    drawInteractiveSearchChart2();
});

function drawInteractiveSearchChart1()
{
  const data = <%- JSON.stringify(nonHyper) %>;

  drawInteractiveSearchChart(data.chartData, "nonhyperChart");
}


function drawInteractiveSearchChart2()
{
  const data = <%- JSON.stringify(hyper) %>

  drawInteractiveSearchChart(data.chartData, "hyperChart");
}




const chartSettings = {
    // The type of chart we want to create
    type: 'line',

    // The data for our dataset
    data: {},

    // Configuration options go here
    options: {
      animation: {
          duration: 0
      },
    responsive: true,
    title: {
      display: false,
      text: ''
    },
    tooltips: {
      mode: 'index',
      intersect: false,
    },
    hover: {
      mode: 'nearest',
      intersect: true
    },
    scales: {
      xAxes: [{
        display: true,
        scaleLabel: {
          display: true,
          labelString: 'The best ranked bind from NN'
        }
      }],
      yAxes: [{
        display: true,
        ticks: {
            beginAtZero: true
        },
        scaleLabel: {
          display: true,
          labelString: 'Number of hits by users'
        }
      }]
    }
  }
}

function drawInteractiveSearchChart(chartData, canvasId)
{

  const returnedDataArray = new Array();
  returnedDataArray.push(chartData);

  let datasets = new Array();

  const num = returnedDataArray.length;
  const divPerChanel = (num / 3) + 1;

  let labels = new Array();

  for (var i = 0; i < returnedDataArray.length; ++i) 
  {
    const returnedData = returnedDataArray[i];

    // Calculate coefs for colour
    const r = (i % 3 == 0 ? 1 : 0) * 255;
    const g = (i % 3 == 1 ? 1 : 0) * 255;
    const b = (i % 3 == 2 ? 1 : 0) * 255;


    const borderColor = "rgba(" + r + ", " + g + ", " + b + ", 1)";

    let data = new Array();

    // Create labels from indices
    for (var j = 0; j < returnedData.length; ++j)
    {
      if (i == 0) {
        labels.push(returnedData[j].index);
      }
      
      data.push(returnedData[j].value);
    }

    const label = String(i);

    const chartData = {
      borderColor,
      backgroundColor: "rgba(255, 0, 0, 0)",
      label,
      pointRadius: 0.5,
      pointHoverRadius: 0.5,
      borderWidth: 1.0,
      data,
    }

    datasets.push(chartData);
  }


  var chartData = {
    labels,
    datasets
  }

  const chartCanvas = document.getElementById(canvasId);
                       
  // Create chart
  var ctx = chartCanvas.getContext('2d');
  var chart = new Chart(ctx, chartSettings);

  // Update data
  chart.data = chartData;
  // Update chart
  chart.update();
}
</script>

<% } %>

</body>

<!-- Include footer -->
<%- include common/footer.ejs %>