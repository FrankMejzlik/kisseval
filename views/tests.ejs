<% function generateOptionHtml(optionsDict, idx, prefix = "") { let html = `
<form data-id="${idx}" class="test-form">`; 
  
  switch(optionsDict.input_type) { 
    case "enum": html += `
  <div class="cont__${prefix}${optionsDict.key} option-cont cell small-12">
    <label for="${prefix}${optionsDict.key}"
      >${optionsDict.name}
      <select
        class="cond-opts-trigger"
        data-id="${prefix}${optionsDict.key}"
        name="${prefix}${optionsDict.key}"
        >`; const vals = optionsDict.values; for (let i = 0; i < vals.length;
        ++i){ html += `<option value="${vals[i].ID}">${vals[i].name}</option>
        `; } html += `</select
      > </label
    >`; 
    for (let i = 0; i < vals.length; ++i){ if (vals[i].options.length > 0) {
    html += `
    <div class="${prefix}${optionsDict.key}__${vals[i].ID} sub-opts">
      `; for (let j = 0; j < vals[i].options.length; ++j){ const opt =
      vals[i].options[j]; html += generateOptionHtml(opt, idx, prefix +
      optionsDict.key + "_"); } html += `
    </div>
    `; } } html += `
  </div>
  `; 
  break; 
  
  case "float": 
    return `
      <div class="option-cont cell small-12">
        <label for="${optionsDict.key}">${optionsDict.name}
          <input
            name="${prefix}${optionsDict.key}"
            class=""
            data-id="${prefix}${optionsDict.key}"
            type="number"
            min="${optionsDict.min}"
            max="${optionsDict.max}"
            step="${optionsDict.step}"
            value="${optionsDict.default}"
          />
        </label>
      </div>`; 
  break; 

  case "int": 
    return `
      <div class="option-cont cell small-12">
        <label for="${optionsDict.key}">${optionsDict.name}
          <input
            name="${prefix}${optionsDict.key}"
            class=""
            data-id="${prefix}${optionsDict.key}"
            type="number"
            min="${optionsDict.min}"
            max="${optionsDict.max}"
            step="${optionsDict.step}"
            value="${optionsDict.default}"
          />
        </label>
      </div>`; 
  break; 

  } 
    html += `
    </form>
    `; 
  return html; 
} %>

<section class="model-tests-section grid-container">
  <div class="model-tests-state">
    <input type="hidden" name="_nextTestBlockIndex" value="1" />
    <input
      type="hidden"
      id="_nextFormIndex"
      name="_nextFormIndex"
      data-nextformindex="0"
    />
  </div>
  <ul class="grid-x grid-padding-x align-center">
    <li id="testBlock_0" class="test-block cell small-6" data-id="0">
      <div class="msg-box callout primary hidden"></div>
      <div class="msg-box callout alert hidden"></div>
      <div class="msg-box callout success hidden"></div>
      <div class="msg-box callout warning working-label hidden">Working...</div>

      <h2>Test block 0</h2>
      <a class="button" onclick="generateTestFormWrapper()">Add test form</a>
      <div class="chart-cont">
        <canvas class="chart-canvas"></canvas>
      </div>
      <ul class="test-forms-list cell small-12" id="testForms"></ul>

      <div class="submit-cont small-12">
        <a class="button submit" onclick="runTests(this)">Run</a>
      </div>
    </li>
  </ul>
</section>

<script src="/javascripts/Chart.bundle.js"></script>
<script src="/javascripts/charts.js"></script>
<script>
  function generateTestFormWrapper() {
    const testFormCont = document.getElementById("testForms");

    const idx = document.getElementById("_nextFormIndex").dataset.nextformindex;
    document.getElementById("_nextFormIndex").dataset.nextformindex =
      Number(idx) + 1;

    generateTestForm(idx, testFormCont);
  }

  function runTests(subBtnElem) {
    console.log("=> runTests(elem)");

    // Get parent block element
    const parElem = subBtnElem.closest(".test-block");

    setTestBlockWorking(parElem);

    const testBlockId = parElem.dataset.id;
    console.log("testBlockId = " + testBlockId);

    // Get all test forms
    const testForms = document.querySelectorAll(
      "#" + parElem.id + " .test-form"
    );

    // Data we'll send into the request
    reqData = {};
    for (let form of testForms) {
      const fId = form.dataset.id;
      let fData = new FormData(form);

      if (typeof reqData[fId] === "undefined") {
        reqData[fId] = {};
      }

      for (var [key, value] of fData.entries()) {
        reqData[fId][key] = value;
      }
    }

    console.log("req_data = " + JSON.stringify(reqData, null, 4));

    url = "/run_model_tests";

    fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(reqData),
    })
      .then((res) => {
        if (!res.ok)
          throw Error(
            "Request to '" + url + "' failed with code '" + res.status + "'!"
          );

        return res.json();
      })
      .then((jsonData) => {
        handleTestSuccess(parElem, jsonData);
      })
      .catch((e) => {
        console.log("Error: " + JSON.stringify(e.message));
        handleTestFail(parElem);
      });

    console.log("<= runTests(elem)");
  }

  function pushTestBlockMessage(blockElem, msg, duration) {
    const msgElem = document.querySelectorAll(
      "#" + blockElem.id + " .msg-box.primary"
    )[0];
    msgElem.classList.add("visible");
    msgElem.innerHTML = msg;

    setTimeout(() => {
      msgElem.classList.remove("visible");
    }, duration);
  }

  function pushTestBlockWarning(blockElem, msg, duration) {
    const msgElem = document.querySelectorAll(
      "#" + blockElem.id + " .msg-box.alert"
    )[0];
    msgElem.classList.add("visible");
    msgElem.innerHTML = msg;

    setTimeout(() => {
      msgElem.classList.remove("visible");
    }, duration);
  }

  function pushTestBlockSuccess(blockElem, msg, duration) {
    const msgElem = document.querySelectorAll(
      "#" + blockElem.id + " .msg-box.success"
    )[0];
    msgElem.classList.add("visible");
    msgElem.innerHTML = msg;

    setTimeout(() => {
      msgElem.classList.remove("visible");
    }, duration);
  }

  function setTestBlockWorking(blockElem) {
    blockElem.classList.add("working");
  }

  function unsetTestBlockWorking(blockElem) {
    blockElem.classList.remove("working");
  }

  function handleTestStart(parElem) {
    // Working is up
    setTestBlockWorking(parElem);
  }

  function handleTestFail(parElem) {
    // Remove working
    unsetTestBlockWorking(parElem);

    // Report the error
    pushTestBlockWarning(parElem, "Error running tests!", 10000);
  }

  function handleTestSuccess(parElem, chartData) {
    // Remove working
    unsetTestBlockWorking(parElem);

    // Draw chart
    const chartElem = document.querySelectorAll(
      "#" + parElem.id + " .chart-canvas"
    )[0];
    plotTestChart(chartElem, chartData);

    pushTestBlockSuccess(parElem, "Tests done!", 5000);
  }

  function generateTestForm(index, parent) {
    const html = `
      <li id="formId_${index}">
        <h3>Test form ${index}</h3>
          <div data-id="${index}" class="">
            
          <% for (let i = 0; i < modelOptions.length; ++i) { %>
            <%- generateOptionHtml(modelOptions[i], "${index}") %>
          <% } %>

        </div>
      </li>`;

    parent.insertAdjacentHTML("beforeend", html);

    const formId = "formId_" + index;
    const triggers = document.querySelectorAll(
      "#" + formId + " .cond-opts-trigger"
    );

    for (let elem of triggers) {
      elem.addEventListener("change", (event) => {
        const elem = event.target;
        let value = elem.options[elem.selectedIndex].value;
        const key = elem.dataset.id;

        const ids = key + "__" + value;

        // Disable all
        const aa = "#" + formId + " .cont__" + key + " .sub-opts * ";
        const aa2 = "#" + formId + " .cont__" + key + " .sub-opts";
        $(aa).attr("disabled", true);
        $(aa2).addClass("hidden");

        const aa3 = "#" + formId + " ." + ids + " * ";
        const aa4 = "#" + formId + " ." + ids;
        // Enable selected
        $(aa3).attr("disabled", false);
        $(aa4).removeClass("hidden");

        const subtriggers = document.querySelectorAll(aa4 + " .cond-opts-trigger");
        if (subtriggers && subtriggers.length > 0)
        {
          // Trigger change manually
          subtriggers.forEach((elem) => {
            elem.dispatchEvent(new Event("change"));
          });
        }
      });
    }

    // Trigger change manually
    triggers.forEach((elem) => {
      elem.dispatchEvent(new Event("change"));
    });
  }
</script>
