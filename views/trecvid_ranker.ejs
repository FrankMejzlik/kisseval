<!-- Include header -->
<%- include common/header.ejs %>

<section class="global-messages-section grid-container">
  <div class="grid-x grid-x align-center">
    <div class="callout" id="mainGlobalMessageCont">
      <h5 class="primary"></h5>
      <p class="secondary"></p>
    </div>
  </div>
</section>

<section class="ranker-grid-section grid-container">
  <div class="grid-x grid-x align-center">

    

<div class="ranker-left-sidebar large-3 cell">

  <form autocomplete="off" class="autocomplete-form" action="/image_finder/" method="POST">

    <!-- Settings bar -->
    <section class="settings-bar-section grid-container">
      <div class="grid-x grid-padding-x align-left">  

        <!-- Image settings -->
        <div class="get-random-image-cont small-4 cell">
            <button type="button" class="button icon-settings open-left-oc" data-toggle="offCanvasLeftSplit1"><img src="/images/generic/icon_settings.svg"></button>
        </div>

        <div class="target-image-rank-cont small-4 cell">
          <span id="targetImageRankOut"></span>
        </div>

        <div class="misc-info-bar small-4 cell">
          <span id="currModelInfo"><%= ranker.settings.modelName ? "Current model: " + ranker.settings.modelName : "" %></span>
        </div>
        

      </div>
    </section>

    <!-- Image preview -->
    <section class="image-preview-section grid-container">
      <div class="grid-x grid-padding-x align-left">  

        <!-- Image settings -->
        <div class="get-random-image-cont small-4 cell" id="getRandomImageCont">

          <% // If search session is running
          if (typeof ranker.searchSession !== "undefined"){
          if (typeof ranker.searchSession.targetImages[0].imageId !== "undefined" && ranker.searchSession.targetImages[0].imageId !== null) 
          { %>

            <a class="button alert" onclick="submitImage();">Give up!</a>

          <% }}
          // If outside of search session
          else
          { %>

            <a class="button" onclick="getRandomImageToPreview(this);">Random image</a>

          <% } %>

        </div>
        
        <div class="target-image-id-cont small-4 cell">
          
          <label class="target-image-id-label">Target image ID:
            <input type="number" id="targetImageId" tabindex="1" name="targetImageId" default="0" value="<%= ranker.searchSession && ranker.searchSession.targetImages[0].imageId ? ranker.searchSession.targetImages[0].imageId : '' %>" />
          </label>

        </div>
        <div class="get-selected-image-to-preview small-4 cell" id="getSelectedImageToPrevies">

          <% // If search session is running
          if (typeof ranker.searchSession !== "undefined" && typeof ranker.searchSession.targetImages[0].imageId !== "undefined" && ranker.searchSession.targetImages[0].imageId !== null) 
          { %>

            

          <% }
          // If outside of search session
          else
          { %>

            <a class="button" onclick="getSelectedImageToPreview(this);" title="Sets target image to provided ID">Show image</a>

          <% } %>

          
        </div>

        <!-- Image preview canvas -->
        <ul class="image-preview small-12 cell" id="targetImagesCont">
          <li><img id="targetImage" src="/images/<%= ranker.searchSession && ranker.searchSession.imageSrc ? ranker.searchSession.imageSrc : "generic/bg_neural.jpg" %>" /></li>
        </ul>

      </div>
    </section>


    <!-- Autocomplete section -->
    <section class="autocomplete-section ranker-single grid-container">
      <div class="grid-x grid-padding-x align-left"> 

        <!-- Query 1 -->
        <div class="autocomplete-input-cont small-12 cell">
          <!-- Autocomplete text input -->
          <input <%= ui.queryInputUnlocked ? "" : "disabled" %> type="text" id="queryInput" tabindex="1" name="query">
          <input type='hidden' id="selectedCounter" name='selectedCounter' value='0'>
          
          <ul class="selected-keywords-list" id="selectedKeywordsList">
        
            <% if (typeof ranker.query !== 'undefined') {
                if (ranker.query instanceof Array) 
                {
                  for (var i = 0; i < ranker.query.length; ++i) {
                  %>
              

                <li class="slected-keyword-checkbox">
                  <input type="checkbox" name="keywordWord" value="<%= ranker.queryWords[i] %>" checked="">                
                  <input type="checkbox" name="keyword" value="<%= ranker.query[i] %>" checked="">                
                  <span><%= ranker.queryWords[i] %></span> <a class="remove-keyword button alert" onclick="removeKeyword(event, this);">&#10006</a>
                </li>

              <%    }
              } else { %>

                <li class="slected-keyword-checkbox">
                <input type="checkbox" name="keywordWord" value="<%= ranker.queryWords %>" checked="">          
                <input type="checkbox" name="keyword" value="<%= ranker.query %>" checked="">       
                <span><%= ranker.queryWords %></span> <a class="remove-keyword button alert" onclick="removeKeyword(event, this);">&#10006</a>
              </li>

                <%
              }
              } %>

          </ul>
          
        </div>

        <!-- Query 2 -->
        <div class="autocomplete-input-cont second small-12 cell">

          <!-- Autocomplete text input -->
          <input <%= ui.queryInputUnlocked ? "" : "disabled" %> type="text" id="queryInput2" tabindex="1" name="query2">
          <input type='hidden' id="selectedCounter2" name='selectedCounter2' value='0'>
          
          <ul class="selected-keywords-list" id="selectedKeywordsList2">
        
            <% if (typeof ranker.query2 !== 'undefined') {
                if (ranker.query2 instanceof Array) 
                {
                  for (var i = 0; i < ranker.query2.length; ++i) {
                  %>
              

                <li class="slected-keyword-checkbox">
                  <input type="checkbox" name="keywordWord2" value="<%= ranker.queryWords2[i] %>" checked="">                
                  <input type="checkbox" name="keyword2" value="<%= ranker.query2[i] %>" checked="">                
                  <span><%= ranker.queryWords2[i] %></span> <a class="remove-keyword button alert" onclick="removeKeyword(event, this);">&#10006</a>
                </li>

              <%    }
              } else { %>

                <li class="slected-keyword-checkbox">
                <input type="checkbox" name="keywordWord2" value="<%= ranker.queryWords2 %>" checked="">          
                <input type="checkbox" name="keyword2" value="<%= ranker.query2 %>" checked="">       
                <span><%= ranker.queryWords2 %></span> <a class="remove-keyword button alert" onclick="removeKeyword(event, this);">&#10006</a>
              </li>

                <%
              }
              } %>

          </ul>
          
        </div>

      </div>


    </form>
    <hr />
    <div id="trecvidHistory" class="large-12 cell grid-container"></div>
  </div>

<!-- Page content -->
<div id="trecvidContent" class="ranker-right-sidebar image-grid-section image-browser-main-tiles large-9 cell grid-container">
  

</div>

<!-- Include autocomplete module -->
<%- include modules/autocomplete_logic_ranker.ejs %>

  </div>
</section>

</body>

<!-- Chart plotting -->
<script src="/javascripts/Chart.bundle.js"></script>
<script>
  const chartSettings = {
    // The type of chart we want to create
    type: 'line',

    // The data for our dataset
    data: {},

    // Configuration options go here
    options: {
      animation: {
          duration: 0
      },
      legend: {
            display: false
          },
      responsive: true,
      title: {
        display: false,
        text: ''
      },
      tooltips: {
        mode: 'index',
        intersect: false,
      },
      hover: {
        mode: 'nearest',
        intersect: true
      },
      scales: {
        xAxes: [{
          display: true,
          scaleLabel: {
            display: true,
            labelString: 'Action index'
          }
        }],
        yAxes: [{
          type: 'logarithmic',
          display: true,
          ticks: {
            beginAtZero: true,
            autoSkip: true,
            min: 0,
            // \todo make dynamic
            suggestedMax: 20000,
            // Return an empty string to draw the tick line but hide the tick label
            // Return `null` or `undefined` to hide the tick line entirely
            maxTicksLimit: 10,
            callback: function(value, index, values) {
                return Number(value);
            }
          },
          scaleLabel: {
            display: true,
            labelString: 'Target image rank'
          }
      }]
    }
  }
}

function drawInteractiveSearchChart(chartDataArray, targetCanvas)
{

  if (typeof chartDataArray === "undefined" || chartDataArray.length <= 0)
  {
    return;
  }
  const returnedDataArray = chartDataArray;

  let datasets = new Array();

  const num = returnedDataArray.length;
  const divPerChanel = (num / 3) + 1;

  let labels = new Array();

  for (var i = 0; i < returnedDataArray.length; ++i) 
  {
    const returnedData = returnedDataArray[i];

    if (typeof returnedData === "undefined" || returnedData.length <= 0)
    {
      continue;
    }

    // Calculate coefs for colour
    const r = (i % 3 == 0 ? 1 : 0) * 255;
    const g = (i % 3 == 1 ? 1 : 0) * 255;
    const b = (i % 3 == 2 ? 1 : 0) * 255;


    const borderColor = "rgba(" + r + ", " + g + ", " + b + ", 1)";

    let data = new Array();

    // Create labels from indices
    for (var j = 0; j < returnedData.length; ++j)
    {
      if (i == 0) {
        labels.push(returnedData[j].index);
      }
      
      data.push(returnedData[j].value);
    }

    const label = String(i);

    const chartData = {
      borderColor,
      backgroundColor: "rgba(255, 0, 0, 0)",
      label,
      pointRadius: 0.5,
      pointHoverRadius: 0.5,
      borderWidth: 1.0,
      data,
    }

    datasets.push(chartData);
  }


  var chartData = {
    labels,
    datasets
  }

  const chartCanvas = targetCanvas;
                       
  // Create chart
  var ctx = chartCanvas.getContext('2d');
  var chart = new Chart(ctx, chartSettings);

  // Update data
  chart.data = chartData;
  // Update chart
  chart.update();
}


</script>


<script>

  $(document).ready(
    function()
    {
      setToNoRunState();
    }
  );

  function clearImageGrid()
  {
    $targetList = $("#resultImagesList");
    $targetList.html("");

    $selectedKeywordsList = $("#selectedKeywordsList");
    $selectedKeywordsList.html("");
  }

  function clearTargetImage()
  {
    $("#targetImage").attr("src", "/images/generic/bg_neural.jpg");
    $("#targetImageId").val(0);

    let ul = document.getElementById("targetImagesCont");

    // Remove all current child nodes
    while (ul.firstChild) 
    {
      ul.removeChild(ul.firstChild);
    }

    // Append default image
    let li = document.createElement("li");
    let img = document.createElement("img");
    img.setAttribute("src", "/images/generic/bg_neural.jpg");
    img.setAttribute("class", "seq-img-0");
    li.appendChild(img);

    ul.appendChild(li);
  }

  function getRandomImageToPreview(elem)
  {
    // Clear old grid
    clearImageGrid();

    // Create AJAX call to get appropriate data
    get('/ranker_ajax_get_random_image_and_start_search_session')
      // If response OK
      .then((data) => 
      {
        data = JSON.parse(data);

        // Get parent <ul> element for image previews
        let ul = document.getElementById("targetImagesCont");

        // Remove all current child nodes
        while (ul.firstChild) 
        {
          ul.removeChild(ul.firstChild);
        }

        // Iterate over all fetched images from video sequence
        for (let i = 0; i < data.length; ++i)
        {
          let li = document.createElement("li");
          let img = document.createElement("img");
          img.setAttribute("src", "/images/" + data[i].imageFilename);
          img.setAttribute("class", "seq-img-" + i);
          li.appendChild(img);

          ul.appendChild(li);
        }  

        // Fill in just first image ID
        $("#targetImageId").val(data[0].imageId);

        // Set query input to enabled state
        $("#queryInput").prop('disabled', false);

        let viewData = new Object();
        viewData.modelName = data.modelName;

        // Edit HTML layout
        putDocumentToPostStartState(viewData);

      })
      // If error occured
      .catch((err) => 
      {
          // Do stuff on error...
      });
  }

  function getSelectedImageToPreview(elem)
  {
    const targetId = $("#targetImageId").val();

    // Clear old grid
    clearImageGrid();

    // Create AJAX call to get appropriate data
    get('/ranker_ajax_get_selected_image_and_start_search_session?imageId=' + targetId)
      // If response OK
      .then((data) => {

        data = JSON.parse(data);

        $("#targetImageId").val(data.imageId);
        $("#targetImage").attr("src", "/images/" + data.imageFilename);
        $("#queryInput").prop('disabled', false);

        let viewData = new Object();
        viewData.modelName = data.modelName;


        // Edit HTML layout
        putDocumentToPostStartState(viewData);

      })
      // If error occured
      .catch((err) => {
          // Do stuff on error...
      });
  }

  function showGlobalMessage(messagePrimary, messageSecondary, time)
  {
    $mainGlobalMessageCont = $("#mainGlobalMessageCont");
    $primary = $($mainGlobalMessageCont.children(".primary")[0]);
    $secondary = $($mainGlobalMessageCont.children(".secondary")[0]);

    $mainGlobalMessageCont.show();
    $primary.html(messagePrimary);
    $secondary.html(messageSecondary);

    setTimeout(() => {
      clearGlobalMesssage();
    }, time);
  }

  function clearGlobalMesssage()
  {
    $mainGlobalMessageCont = $("#mainGlobalMessageCont");
    $primary = $($mainGlobalMessageCont.children(".primary")[0]);
    $secondary = $($mainGlobalMessageCont.children(".secondary")[0]);


    $primary.html("");
    $secondary.html("");
    $mainGlobalMessageCont.hide();
  }


function putDocumentToPostStartState(viewData)
{
  document.getElementById("rankerResultBoard").classList.remove("active");
  document.getElementById("queryInput").disabled = false;

  document.getElementById("currModelInfo").innerHTML = "Current model: " + viewData.modelName;
  
  document.getElementById("getRandomImageCont").innerHTML = '<a class="button alert" onclick="submitImage();">Give up!</a>';

  document.getElementById("getSelectedImageToPrevies").innerHTML = '';  
}


function putDocumentToPostSubmitState()
{
  // Crear target image
  clearTargetImage();

  // Clear old grid
  clearImageGrid();

  document.getElementById("queryInput").disabled = true;

  document.getElementById("getRandomImageCont").innerHTML = '<a class="button" onclick="getRandomImageToPreview(this);">Random image</a>';
  document.getElementById("getSelectedImageToPrevies").innerHTML = '<a class="button" onclick="getSelectedImageToPreview(this);" title="Sets target image to provided ID">Show image</a>';  

  document.getElementById("rankerResultBoard").classList.add("active");
}

function putDocumentToPreStartState()
{
  document.getElementById("getRandomImageCont").innerHTML = '<a class="button" onclick="getRandomImageToPreview(this);">Random image</a>';
  document.getElementById("getSelectedImageToPrevies").innerHTML = '<a class="button" onclick="getSelectedImageToPreview(this);" title="Sets target image to provided ID">Show image</a>'; 
  

  document.getElementById("rankerResultBoard").classList.remove("active");
}


  function submitImage(elem)
  {
    let imageId;
    if (typeof elem === "undefined")
    {
      imageId = -1;
    }
    else 
    {
      imageId = $(elem).parent().data("image-id");
    }

    // Create AJAX call to get appropriate data
    get('/ranker_ajax_submit_image?imageId=' + imageId)
      // If response OK
      .then((data) => {

        data = JSON.parse(data);

        // If was give up call
        if (data.giveUp || data.correct)
        {
          

          if (data.correct)
          {
            console.log("Showing correct submit image data.");

            showGlobalMessage("Correct.", "Great job", 3000);
          }
          else 
          {
            console.log("Showing give up results");
          }
          
          // Draw chart
          let dataArray = new Array();
          dataArray.push(data.chartData);
          const canvas = document.getElementById("rankerResultBoardChartCanvas");

          document.getElementById("resultInfo").innerHTML = "";

          // Print info into result html
          if (data && data.relevantImagesArray && data.relevantImagesArray.targetImageRank)
          {
            document.getElementById("resultInfo").innerHTML += "<h3>Final image rank: <span>" + data.relevantImagesArray.targetImageRank +"</span></h3>";
          }
          document.getElementById("resultInfo").innerHTML += "<h5>Time: <span>" + data.sessionDuration  + " s</span></h5>";

          drawInteractiveSearchChart(dataArray, canvas);

          putDocumentToPostSubmitState();

        } 
        // Wrong image submit
        else 
        {
          console.log("Showing invalid submit image data.");

          showGlobalMessage("Incorrect submit", "Sorry, this is not the correct image, please try again.", 3000);
        }


        

        //currentPrinter = setInterval(printImagesFromTo, batchPrintTimeout);

      })
      // If error occured
      .catch((err) => {
          // Do stuff on error...
      });
  }

  let currentPrinter;
  let currentImagesToPrintArray;
  let currentImageIndex;
  let numImagesToPrint;
  const numImagesPerBatch = 300;
  const batchPrintTimeout = 2000;

  function printImagesFromTo()
  {
    $targetList = $("#resultImagesList");

    for (var i = 0; i < numImagesPerBatch && currentImageIndex < numImagesToPrint; ++currentImageIndex) 
    {
      $targetList.append(
        '<li class="rel-img-item small-6 medium-4 large-2 cell" onclick="switchModalImageHtmlContents(' +currentImagesToPrintArray[currentImageIndex].imageId + ')"\
        data-open="modalImage" data-image-id="' + currentImagesToPrintArray[currentImageIndex].imageId + '" style="background-image: url(\'/images/' + currentImagesToPrintArray[currentImageIndex].filename + '\')">\
          <a class="button btn-submit success" onclick="" title="Submit this image">&#10004;</a>\
        </li>'
      );

      ++i;
    }
  }

  function processAction(action, operand, word)
  {
    return;
    // Stop printer if running
    clearInterval(currentPrinter);
    currentImagesToPrintArray = undefined;

    // Create AJAX call to get appropriate data
    get('/ranker_ajax_process_action?action=' + action + '&operand=' + operand + '&operandWord=' + word)
      // If response OK
      .then((data) => {

        data = JSON.paata = JSON.parse(data);

        $targetList = $("#resultImagesList");
        $targetList.html("");

        if (typeof data.relevantImagesArray.targetImageRank !== "undefined")
        {
          $("#targetImageRankOut").html("<p>Target rank: </p>" + data.relevantImagesArray.targetImageRank);
        }
        
        numImagesToPrint = data.relevantImagesArray.images.length;
        currentImagesToPrintArray = data.relevantImagesArray.images;

        currentImageIndex = 0;
        for (currentImageIndex = 0; currentImageIndex < numImagesPerBatch; ++currentImageIndex) 
        {
          $targetList.append(
            '<button class="close-button" data-close aria-label="Close modal" type="button">\
              <span aria-hidden="true">&times;</span>\
            </button>\
            <li class="rel-img-item small-6 medium-4 large-2 cell" onclick="switchModalImageHtmlContents(' + currentImagesToPrintArray[currentImageIndex].imageId+ ')"\
              data-image-id="' + data.relevantImagesArray.images[currentImageIndex].imageId + '" style="background-image: url(\'/images/' + data.relevantImagesArray.images[currentImageIndex].filename + '\')">\
              <a class="button btn-submit success" onclick="submitImage(this);" title="Submit this image">&#10004;</a>\
              <a class="just-clicker"  data-open="modalImage"></a>\
            </li>'
          );
        }

        // Draw chart
        let dataArray = new Array();
        dataArray.push(data.chartData);
        const canvas = document.getElementById("interactiveSearchChart");

        drawInteractiveSearchChart(dataArray, canvas);

        //currentPrinter = setInterval(printImagesFromTo, batchPrintTimeout);

      })
      // If error occured
      .catch((err) => {
          // Do stuff on error...
      });
  }

// xoxo
const contentElem = document.getElementById("trecvidContent");

function clearQueries()
{
  const q1List = document.getElementById("selectedKeywordsList");
  const q2List = document.getElementById("selectedKeywordsList2");

  while (q1List.firstChild) 
  {
    q1List.removeChild(q1List.firstChild);
  }

  while (q2List.firstChild) 
  {
    q2List.removeChild(q2List.firstChild);
  }

}

function setToNoRunState()
{
  let html = "<h2>Select what run type you want to start.</h2>";
  html += "<a onclick='startRunNormal();' class='button'>Start normal run</a>";
  html += "<a onclick='startRunProgress();' class='button'>Start progress run</a>";
  
  contentElem.innerHTML = html;

  clearQueries();
}

function setToTaskRunningState(taskId, taskString)
{
  let html = "<h2>Task ID: " + taskId + "</h2>";
  html += "<h3>Task: " + taskString + "</h3>";
  html += "<hr />";
  html += "<a onclick='submitTask();' class='button'>Submit task</a>";

  contentElem.innerHTML = html;
}

function setToTaskSubmittedState()
{
  let html = "<h2>Task submitted, you can go on to next one.</h2>";
  html += "<a onclick='nextTask();' class='button'>Next task</a>";

  contentElem.innerHTML = html;
  clearQueries();
}

function nextTask()
{
  // Create AJAX call to get appropriate data
  post('/trecvid_ranker_ajax_next_task')
    // If response OK
    .then((data) => {

      data = JSON.parse(data);

      setToTaskRunningState(data.taskId, data.taskString);

    })
    // If error occured
    .catch((err) => {
        // Do stuff on error...
    });
}

function startRunNormal()
{
  // Create AJAX call to get appropriate data
  post('/trecvid_ranker_ajax_start_run_normal')
    // If response OK
    .then((data) => {

      data = JSON.parse(data);

      setToTaskRunningState(data.taskId, data.taskString);

    })
    // If error occured
    .catch((err) => {
        // Do stuff on error...
    });
}

function startRunProgress()
{
  // Create AJAX call to get appropriate data
  post('/trecvid_ranker_ajax_start_run_progress')
    // If response OK
    .then((data) => {

      data = JSON.parse(data);

      setToTaskRunningState(data.taskId, data.taskString);

    })
    // If error occured
    .catch((err) => {
        // Do stuff on error...
    });
}

let words1Last = new Array();

function submitTask()
{
  var keywords = new Array(); 
  var keywords2 = new Array(); 
  var keywordsWords = new Array(); 
  var keywordsWords2 = new Array(); 

  $('[name="keyword"]').each(function(){
    keywords.push($(this).val()); 
  });

  $('[name="keyword2"]').each(function(){
    keywords2.push($(this).val()); 
  });

  $('[name="keywordWord"]').each(function(){
    keywordsWords.push($(this).val()); 
  });

  $('[name="keywordWord2"]').each(function(){
    keywordsWords2.push($(this).val()); 
  });


  var inputData = new Object;
  inputData.keyword = keywords;
  inputData.keywordWord = keywordsWords;
  inputData.keyword2 = keywords2;
  inputData.keywordWord2 = keywordsWords2; 


  // Create AJAX call to get appropriate data
  post('/trecvid_ranker_ajax_submit_task', JSON.stringify(inputData))
    // If response OK
    .then((data) => {

      data = JSON.parse(data);

      const hist = document.getElementById("trecvidHistory");

      hist.innerHTML = hist.innerHTML + "<p>Q1: " + keywordsWords.toString() + "<br /> Q2: " + keywordsWords2.toString() + "</p>";

      switch(data)
      {
        // Was last run, end run
        case 0:
          setToNoRunState();
          break;

        // Nothing happens
        case 1:

          break;

        // Go to task submitted state
        case 2:
          setToTaskSubmittedState();
          break;
      }

    })
    // If error occured
    .catch((err) => {
        // Do stuff on error...
    });

}


function addKeyword(keywordId, word, source) 
{
  let keywordSource = 1;
  // If source is detail window
  if (source == 2)
  {
    keywordSource = 2;
  }

  // xoxo
  processAction(keywordSource, keywordId, word);

  const selectedContainer = document.getElementById("selectedKeywordsList");

  chechkboxCont = document.createElement("li");
  chechkboxCont.setAttribute("class", 'slected-keyword-checkbox');

  chechkboxCont.innerHTML += "<input type='checkbox' name='keyword' value='" + keywordId + "' checked>\
    <input type='checkbox' name='keywordWord' value='" + word + "' checked>\
    <span>" + word + "</span> <a class='remove-keyword button alert' onclick='removeKeyword(event, this, 0);'>&#10006</a>"

  selectedContainer.appendChild(chechkboxCont);

}






const labelsContainer = document.getElementById("modalImageTab1");
  const pureHyerpnymsContainer = document.getElementById("modalImageTab2");
  const imageIdCont = document.getElementById("modalImageId");
  const succFramesCont = document.getElementById("sucFramesCont");

function switchModalImageHtmlContents(id) 
{
  


  $.ajax('/ranker_ajax_get_image_keywords_for_interactive_search?imageId=' + id)
    .done(function(data)
    {
      const hypernymsArray = data.hypernymsArray;
      const nonHypernymsArray = data.nonHypernymsArray;
      const shotFrames = data.shotFrames;

      // Fill in image ID
      imageIdCont.innerHTML = data.imageId;

      // 
      // Fill in succ frames
      //
      let succFramesHtml = "<li class='shot-frame-praview'>";
      for (var i = 0; i < shotFrames.length; ++i) 
      {
        succFramesHtml += "<img src='../images/" + shotFrames[i].frameFilename + "' />";
        succFramesHtml += "<small>" + shotFrames[i].frameId + "</small>";
      }
      succFramesHtml += "</li>";
      succFramesCont.innerHTML = succFramesHtml;


      /*
        Labels
       */

      let labelsItemsHtml = "<ol class='labels-list non-hypernyms-list'>";

      for (var i = 0; i < nonHypernymsArray.length; ++i) 
      {
        labelsItemsHtml += "<li class='probs-list-item '>";
        labelsItemsHtml += "<a class='keyword' onclick='addKeyword(" + nonHypernymsArray[i].wordnetId + ", \"" + nonHypernymsArray[i].word + "\", 2)'>" + nonHypernymsArray[i].word +  "<span class='ranking'>" + nonHypernymsArray[i].ranking + "</span></a>";
        
        let str = "<ul class='example-images'>";
        
        const exampleImagesArr = nonHypernymsArray[i].exampleImages;
        for (var ii = 0; ii < exampleImagesArr.length; ++ii) 
        { 
          
            str += "<li><img src='../images/" + exampleImagesArr[ii] + "' /></li>";    
        }

        str += "</ul>";

        labelsItemsHtml += str;
        labelsItemsHtml += "</li>";
      }
      labelsItemsHtml += "</ol>";

      // Push HTML inside
      labelsContainer.innerHTML = labelsItemsHtml;
      
      /*
        Pure hypernyms
       */

      html = "<ol class='labels-list  hypernyms-list'>";

      for (var i = 0; i < hypernymsArray.length; ++i) 
      {
        html += "<li class='probs-list-item '>";
          html += "<a class='keyword' onclick='addKeyword(" + hypernymsArray[i].wordnetId + ", \"" + hypernymsArray[i].word + "\", 2)'>" + hypernymsArray[i].word + "<span class='ranking'>" + hypernymsArray[i].ranking + "</span></a>";
            
          let str = "<ul class='example-images'>";
          
          const exampleImagesArr = hypernymsArray[i].exampleImages;
          for (var ii = 0; ii < exampleImagesArr.length; ++ii) 
          { 
            
              str += "<li><img src='../images/" + exampleImagesArr[ii] + "' /></li>";    
          }

          str += "</ul>";

        html += str;

        html += "</li>";
      }
      html += "</ol>";
      
      // Push HTML inside
      pureHyerpnymsContainer.innerHTML = html;
    }
  );
}

</script>

<!-- Include footer -->
<%- include common/footer.ejs %>